class DSU {
public:
    vector<int> parent, size;

    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        for (int i = 0; i < n; i++)
            parent[i] = i;
    }

    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]); // Path compression
        return parent[x];
    }

    void unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            if (size[rootX] < size[rootY])
                swap(rootX, rootY);
            parent[rootY] = rootX;
            size[rootX] += size[rootY];
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);

        // Step 1: Build the connected components using Union-Find
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.unite(i, j);
                }
            }
        }

        // Step 2: Count the size of each component
        unordered_map<int, int> componentSize;
        for (int i = 0; i < n; i++) {
            componentSize[dsu.find(i)]++;
        }

        // Step 3: Count the number of initially infected nodes in each
        // component
        unordered_map<int, int> infectedCount;
        for (int node : initial) {
            infectedCount[dsu.find(node)]++;
        }

        // Step 4: Determine the best node to remove
        int bestNode = -1;
        int maxSaved = 0;

        for (int node : initial) {
            int root = dsu.find(node);
            if (infectedCount[root] ==
                1) { // This node is the ONLY infected node in its component
                int saved = componentSize[root]; // Removing it saves the entire
                                                 // component

                // Choose the node that saves the most, or the smallest index if
                // tie
                if (saved > maxSaved ||
                    (saved == maxSaved && node < bestNode)) {
                    maxSaved = saved;
                    bestNode = node;
                }
            }
        }

        // If no node prevents infection, return the smallest index from
        // `initial`
        if (bestNode == -1) {
            bestNode = *min_element(initial.begin(), initial.end());
        }

        return bestNode;
    }
};